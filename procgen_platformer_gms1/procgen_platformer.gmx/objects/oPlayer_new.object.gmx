<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>oParEntity</parentName>
  <maskName>sPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

// Inherit oParEntity variables
event_inherited();

facing = 1;

// Movement ///////////////////////////////////////////////////////////////////

groundAccel = 1.00;
groundFric  = 2.00;
airAccel    = 0.75;
airFric     = 0.01;
vxMax       = 5.50;
vyMax       = 10.0;
jumpHeight  = 6.00;
gravNorm    = 0.50;
gravSlide   = 0.25; 

clingTime   = 2.0;

// Misc ///////////////////////////////////////////////////////////////////////

// States
IDLE     = 10;
RUN      = 11;
JUMP     = 12;
ROLL     = 13;
CLIMB    = 14;
SHOOT    = 15;

// Initialize properties
state  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing

// For squash + stretch
xscale = 1;
yscale = 1;

///////////////////////////////////////////////////////////////////////////////

attacking = false;
blocking  = false;
clibing   = true;
ropeAttach = noone;
arrowAngle = 0;

//fallTime = 0;
//fallMax  = 28;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, oFxRoomRestart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Roll slash
attacking = false;
state     = IDLE; // ?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Step 2.0

/// EntityStep();

jumped = false;
landed = false;

if (vy &lt; 1 &amp;&amp; vy &gt; -1)
    PlatformCheck();
else
    repeat(abs(vy)) {
        if (!PlatformCheck())
            y += sign(vy);
        else
            break;
    }

if (platformTarget) {
    if (!onGround)
        landed = true;
    
    if (landed)
        with (platformTarget) other.vy = 0;
    else
        with (platformTarget) other.vy = 0;
}

repeat(abs(vx)) {
    if (place_meeting(x + sign(vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y - 1, oParSolid))
        y -= 1;
         
    if (place_meeting(x + sign(vx), y + 2, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y + 1, oParSolid))
        y += 1;
      
    // Push block //
    if (place_meeting(x + sign(vx), y, oPushBlock)) {
        // Push slowly
        vx = clamp(vx, -1, 1);
            
        with (instance_place(x + sign(vx), y, oPushBlock)) {
            // UP slope
            if (place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y - 1, oParSolid))
                --y;
            
            // DOWN slope
            if (!place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(other.vx), y + 2, oParSolid))
                ++y;        

            if (!place_meeting(x + sign(other.vx), y, oParSolid))
                x += sign(other.vx); 
            else {
                other.h = 0;
                break;
            }        
        }
    } // End push block //          
          
    if (!place_meeting(x + sign(vx), y, oParSolid))
        x += sign(vx);
    else
        vx = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rope Climb

//if(place_meeting(x, y, oRope) and (keyboard_check_pressed(vk_up) or keyboard_check_pressed(vk_down))) {
//    ropeAttach = instance_place(x, y, oRope);
//    state = CLIMB;
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onGroundPrev = onGround;

event_inherited();

if (onGround &amp;&amp; !onGroundPrev) {
    for (var i = 0; i &lt; 4; ++i) {
        instance_create(x + random_range(-8, 8), y + 8 + random_range(-2, 2), oParticlePlayer);
    }
    
    xscale = 1.33;
    yscale = 0.67;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Input //////////////////////////////////////////////////////////////////////

var kLeft, kRight, kUp, kDown, kJump, kJumpRelease, kHoldShoot, kBlock, kRollL, kRollR, tempAccel, tempFric;

kLeft        = keyboard_check(vk_left)  || gamepad_axis_value(0, gp_axislh) &lt; -0.4;
kRight       = keyboard_check(vk_right) || gamepad_axis_value(0, gp_axislh) &gt;  0.4;
kUp          = keyboard_check(vk_up)    || gamepad_axis_value(0, gp_axislv) &lt; -0.4;
kDown        = keyboard_check(vk_down)  || gamepad_axis_value(0, gp_axislv) &gt;  0.4;

kJump        = keyboard_check_pressed(ord('Z'))  || gamepad_button_check_pressed(0, gp_face1);
kJumpRelease = keyboard_check_released(ord('Z')) || gamepad_button_check_released(0, gp_face1);

kHoldShoot   = keyboard_check(ord('X'))          || gamepad_button_check(0, gp_face3);
kShoot       = keyboard_check_released(ord('X')) || gamepad_button_check_released(0, gp_face3);
kBlock       = keyboard_check(ord('C'))          || gamepad_button_check(0, gp_face2);
kRollL       = keyboard_check_pressed(ord('A'))  || gamepad_button_check_pressed(0, gp_shoulderlb);
kRollR       = keyboard_check_pressed(ord('D'))  || gamepad_button_check_pressed(0, gp_shoulderrb);

// Movement ///////////////////////////////////////////////////////////////////

// Apply the correct form of acceleration and friction
if (onGround) {  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}

// Reset wall cling
if ((!cRight &amp;&amp; !cLeft) || onGround) {
    canStick = true;
    sticking = false;
}   

// Cling to wall
if (((kRight &amp;&amp; cLeft) || (kLeft &amp;&amp; cRight)) &amp;&amp; canStick &amp;&amp; !onGround) {
    alarm[0] = clingTime;
    sticking = true; 
    canStick = false;       
}

// Handle gravity
if (!onGround) {
    if ((cLeft || cRight) &amp;&amp; vy &gt;= 0) {
        // Wall slide
        vy = Approach(vy, vyMax, gravSlide);
    } else {
        // Fall normally
        vy = Approach(vy, vyMax, gravNorm);
    }
}

if (!IsAny(state, SHOOT, CLIMB)) {
    // Left 
    if (kLeft &amp;&amp; !kRight &amp;&amp; !sticking) {
        facing = -1;
        state  = RUN;
        
        // Apply acceleration left
        if (vx &gt; 0)
            vx = Approach(vx, 0, tempFric);   
        vx = Approach(vx, -vxMax, tempAccel);
    // Right
    } else if (kRight &amp;&amp; !kLeft &amp;&amp; !sticking) {
        facing = 1;
        state  = RUN;
        
        // Apply acceleration right
        if (vx &lt; 0)
            vx = Approach(vx, 0, tempFric);   
        vx = Approach(vx, vxMax, tempAccel);
    }
}



// Friction
if (!kRight &amp;&amp; !kLeft) {
    vx = Approach(vx, 0, tempFric);
    
    if (!IsAny(state, CLIMB, SHOOT))
        state = IDLE;
} 
       
// Wall jump
if (kJump &amp;&amp; cLeft &amp;&amp; !onGround) {
    yscale = 1.33;
    xscale = 0.67;
            
    if (kLeft) {
        vy = -jumpHeight * 1.2;
        vx =  jumpHeight * .66;
    } else {
        vy = -jumpHeight * 1.1;
        vx =  vxMax; 
    }  
}

if (kJump &amp;&amp; cRight &amp;&amp; !onGround) {
    yscale = 1.33;
    xscale = 0.67;
    
    if (kRight) {
        vy = -jumpHeight * 1.2;
        vx = -jumpHeight * .66;
    } else {
        vy = -jumpHeight * 1.1;
        vx = -vxMax;
    }  
}

if(place_meeting(x, y, oRope) and (kUp or kDown)) {
    ropeAttach = instance_place(x, y, oRope);
    state = CLIMB;
}

// Rope Climbing
if(state == CLIMB) {
    vx = 0;
    vy = 0;
    
    var nextAttach = instance_place(x, y, oRope)
    ropeAttach = nextAttach;
    if(nextAttach != noone and nextAttach != ropeAttach)
        ropeAttach = nextAttach;
        
    if(instance_exists(ropeAttach)) {
        x = ropeAttach.x;
        
        if(kUp and !kDown) {
            vy = -2.0;
        }
        else if(!kUp and kDown) {
            vy = 2.0;
        }
        else {
            
        }
        
        if(kLeft and !kRight) {
           // with(ropeAttach)
               // physics_apply_impulse(phy_position_x, phy_position_y, -10, 0)
        }
        else if(!kLeft and kRight) {
            //with(ropeAttach)
                //physics_apply_impulse(phy_position_x, phy_position_y, 10, 0)
        }
        else {
            
        }
    }
    else {
        state = JUMP;
    }
    
    if(kJump) {
        state = JUMP;
        vy = -jumpHeight;
        ropeAttach = noone;
    }
    
}
 
// Jump 
if (kJump) { 
    if (onGround) {
        // Fall thru platform
        if (kDown) {
            if (place_meeting(x, y + 1, oParJumpThru))
                ++y;
        } else {
            vy = -jumpHeight;
            
            yscale = 1.33;
            xscale = 0.67;
        }
    }
// Variable jumping
} else if (kJumpRelease) { 
    if (vy &lt; 0)
        vy *= 0.25;
}

// Jump state
if (!onGround and state != CLIMB)
    state = JUMP;
    
// Run particles
else if (random(100) &gt; 85 &amp;&amp; abs(vx) &gt; 0.5)
    instance_create(x, y + 8, oParticlePlayer);

// Swap facing during wall slide
if (cRight &amp;&amp; !onGround)
    facing = -1;
else if (cLeft &amp;&amp; !onGround)
    facing = 1;

// Roll
//if (onGround &amp;&amp; !attacking) {
//    if (state != ROLL) {
//       if (kRollL) {
//            facing = -1;
//            
//            image_index  = 0;
//            image_speed  = 0.5;
//            sprite_index = sPlayerRoll;
//            
//            state = ROLL;
//        } else if (kRollR) {
//            facing = 1;
//            
//            image_index  = 0;
//            image_speed  = 0.5;
//            sprite_index = sPlayerRoll;
//            
//            state = ROLL;
//        }
//    }
//}

// Roll speed
//if (state == ROLL) {
//    vx = facing * 6;
    
    // Break out of roll
//    if (!onGround || (cLeft || cRight)) {
//        state = IDLE;
//        if (!attacking)
//            alarm[1] = -1;
//    }
//}
    
// Shoot Arrow
if (kHoldShoot) {
    state = SHOOT;
}
else if(kShoot) {
    state = IDLE;
}

if(kShoot) {
    with(instance_create(x, y, oArrow)) {
        vx = cos(degtorad(other.arrowAngle)) * 20;
        vy = -sin(degtorad(other.arrowAngle)) * 20;
        image_angle = point_direction(x, y, x + vx, y + vy);
    }
}

if(state == SHOOT) {

    if(onGround) vx = Approach(vx, 0, tempFric);
    
    // Eight directions (probably there's a smarter way to do this)
    
    if(kRight and !kUp and !kLeft and !kDown) {         // right
        arrowAngle = 0;
        facing = 1;
    }
    else if(!kRight and kUp and !kLeft and !kDown) {    // up
        arrowAngle = 90;
    }
    else if(!kRight and !kUp and kLeft and !kDown) {    // left
        arrowAngle = 180;
        facing = -1;
    }
    else if(!kRight and !kUp and !kLeft and kDown) {    // down
        arrowAngle = 270;
    }
    else if(kRight and kUp and !kLeft and !kDown) {     // right + up
        arrowAngle = 45;
        facing = 1;
    }
    else if(kRight and !kUp and !kLeft and kDown) {     // right + down
        arrowAngle = 315;
        facing = 1;
    }
    else if(!kRight and kUp and kLeft and !kDown) {     // left + up
        arrowAngle = 135;
        facing = -1;
    }
    else if(!kRight and !kUp and kLeft and kDown) {     // left + down
        arrowAngle = 225;
        facing = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Squash + stretch

xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hitbox

with (oPlayerAtkBox)
    instance_destroy();

// Dash out of roll
//if (sprite_index == sPlayerRollSlash) {    
//    with (instance_create(x, y, oPlayerAtkBox)) {
//        bboxleft  = min(other.x + (5 * other.facing), other.x + (24 * other.facing));
//        bboxright = max(other.x + (5 * other.facing), other.x + (24 * other.facing));
//        
//        bboxtop    = other.y - 1;
//        bboxbottom = other.y + 8; 
//    }
//}
    
// Jab
if (sprite_index == sPlayerJab &amp;&amp; round(image_index) &gt; 0) {    
    with (instance_create(x, y, oPlayerAtkBox)) {
        bboxleft  = min(other.x + (5 * other.facing), other.x + (30 * other.facing));
        bboxright = max(other.x + (5 * other.facing), other.x + (30 * other.facing));
        
        bboxtop    = other.y - 1;
        bboxbottom = other.y + 8; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lantern

with(instance_place(x, y, oRope)) {
    physics_apply_impulse(phy_position_x, phy_position_y, other.vx * 10, other.vy * 10)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == sPlayerJab)
    attacking = false;
    
if (sprite_index == sPlayerRoll) {
    if (!attacking)
        alarm[1] = -1;
            
    state = IDLE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw sprite depending on player state
if (!attacking) {
    switch (state) {
        case IDLE: 
            image_speed = 0.2;
            
            if (blocking)
                sprite_index = sPlayerIdleShield;
            else
                sprite_index = sPlayerIdle;
        break;
        
        case RUN: 
            image_speed = 0.33; 
            
            if (blocking)
                sprite_index = sPlayerRunShield;
            else
                sprite_index = sPlayerRun;
        break;
        
        case JUMP:
            // Mid jump   
            if (!(place_meeting(x, y + 2, oParSolid) &amp;&amp; vy != 0) &amp;&amp; vy &gt;= -1.0 &amp;&amp; vy &lt;= 1.0) {  
                if (blocking)
                    sprite_index = sPlayerJumpMShield;
                else
                    sprite_index = sPlayerJumpM;  
           } else { 
                // Rise + fall
                if (vy &lt;= 0) {
                    if (blocking)
                        sprite_index = sPlayerJumpUShield;
                    else  
                        sprite_index = sPlayerJumpU;  
                } else {
                    if (blocking)
                        sprite_index = sPlayerJumpDShield;
                    else
                        sprite_index = sPlayerJumpD;
                }
            }
             
            // When against a wall   
            if (cRight || cLeft)
                if (blocking)
                    sprite_index = sPlayerSlideShield;
                else
                    sprite_index = sPlayerSlide;  
        break;
        
        case SHOOT:
            draw_sprite_ext(sArrowBig, 0, x, y, 1, 1, arrowAngle, c_white, 1.0);
        break;
    }
}

// Draw player
if (onGround)
    draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);    
else
    draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
